;;; *************************************************************
;;; Copyright (C) 2013 Torsten Anders (torsten.anders@beds.ac.uk) 
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License
;;; as published by the Free Software Foundation; either version 3
;;; of the License, or (at your option) any later version.
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;; *************************************************************

(in-package :cluster-rules)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; OM-VERSION

(om::defmethod! no-voice-crossing ((voices list) (input-mode t) &optional (rule-type :true/false) (weight 1))
 :initvals '( (0 1) :all :true/false 1)
 :indoc '("voices-list"  "input-mode" "rule-type" "weight-number")
 :icon 01 ; THIS IS THE NUMBER OF THE QUESTION MARK ICON FOR OM
 :menuins '( (1 (("all" :all) ("beat" :beat) ("1st-beat" :1st-beat) ("1st-voice" :1st-voice) ))
                    (2 (("true/false" :true/false) ("heur-switch" :heur-switch)) )
                 ) 
:doc 	 "Voices should not cross, i.e., the pitch of simultaneous note pairs in voices are always sorted in decreasing order.

Arguments are inherited from Rpitch-pitch." 

;NOTE: I've changed the name r-pitch-pitch to rpitch-pitch when porting CE to OM (This is also true for all CE functions). The original function (r-pitch-pitch) still exists in CE package as a ordinary lisp function (without the OM interface generated by om::defmethod!).

(let ((sorted-voices (sort voices #'<))
       (rule (eval `#'(lambda (pitches) ;MOVED THE RULE HERE TO AVOID LEXICAL CLOSURES
                             (apply #'>= (remove NIL pitches))))))   ;; no rests -- no NILs
  (mappend #'(lambda (voice1 voice2)
    (ce::R-pitch-pitch 
    rule ;<== THE VARIABLE RULE CREATED BY LET 
    voices
    '(0)
    input-mode 
    nil ;<==  gracenotes?: no grace-notes available in OM
    :pitch
    rule-type weight))
    (butlast sorted-voices) 
    (rest sorted-voices))))

;; no-parallels

(om::defmethod! no-parallels ((mode t) (intervals list) (voices list) &optional (rule-type :true/false) (weight 1)) ; <== removed the gracenotes?
 :initvals '( :open '(0 700) (0 1) :true/false 1) ; <== changed intervals to midicents and removed the gracenotes? initarg
 :indoc '("mode" "intervals-list" "voices-list" "rule-type" "weight-number") ; <== removed the gracenotes? indoc
 :icon 01
 :menuins '( (0 (("open" :open) ("open-and-hidden" :open-and-hidden)))  ;<== added the :menuins (the first element of each sublist <ex: "open"> is a string and the second will pass to the function as a :symbol)
                    (3 (("true/false" :true/false) ("heur-switch" :heur-switch)) ) )
 :doc "Parallels of given intervals are prohibited between all combinations of the given voices. Args: mode, intervals, voices.

Arguments are inherited from Rpitch-pitch."

  (let ((rule (eval `#'(lambda (pitches1 pitches2) 
                    (if (every #'(lambda (p) p) (append pitches1 pitches2))  ; no rests -- no NILs
 			      (let* ((pitch1a (first pitches1)) ; 1st and 2nd pitch of voice A and voice B
 				     (pitch1b (second pitches1))
 				     (pitch2a (first pitches2))
 				     (pitch2b (second pitches2))
 				     (harm-interval2 (mod (abs (- pitch2b pitch2a)) 1200)) ;<== changed to midicents (mod 1200)
 				     (matchingInterval2? (member harm-interval2 (list ,.intervals)))) ;<== included a list function and comma (list ,.intervals)
 				(case ,mode ;<== included a comma
 				  (:open-and-hidden (if matchingInterval2? 
 							(let ((directionA (signum (- pitch1a pitch2a)))  
 							      (directionB (signum (- pitch1b pitch2b))))
 							  (/= directionA directionB))
 							T))
 				  (:open (if matchingInterval2? 
 					     (let ((harm-interval1 (mod (abs (- pitch1b pitch1a)) 1200))) ;<== changed to midicents
 					       (/= harm-interval1 harm-interval2))
 					     T))))
 			      T)))))
   (map-pairwise #'(lambda (voice1 voice2)
     (ce::Rpitch-pitch 
     rule			  
     (list voice1 voice2)
     '(0)
     :all
     :pitch
     rule-type weight))
     voices)))

#|
;;;;;;;;;;;;;;;;;;
;;; DEFUN VERSION

(defun no-voice-crossing 
    (&key (voices 0)
       (input-mode :all) ; options: :all, :beat, :1st-beat, :1st-voice 
       (gracenotes? :include-gracenotes) ; options: :include-gracenotes, :exclude-gracenotes
       (rule-type :true/false) ; options: :true/false :heur-switch
       (weight 1))
  "Voices should not cross, i.e., the pitch of simultaneous note pairs in voices are always sorted in decreasing order.

Arguments are inherited from r-pitch-pitch."
  (let ((sorted-voices (sort voices #'<)))
    (mappend #'(lambda (voice1 voice2)
		 (ce::r-pitch-pitch (ce::fix-ompatch-rule #'(lambda (pitches)
				    ;; no rests -- no NILs
				    (apply #'>= (remove NIL pitches)))) 
				(list voice1 voice2)
				'(0)
				input-mode
				gracenotes?
				:pitch
				rule-type weight))
	     (butlast sorted-voices)
	     (rest sorted-voices))))



 ;; no-parallels

 (defun no-parallels (&key
 		       (mode :open) ; options: :open, :open-and-hidden
 		       (intervals '(0 7))
 		       (voices '(0 1))
 		       (gracenotes? :include-gracenotes) ; options: :include-gracenotes, :exclude-gracenotes
 		       (rule-type :true/false) ; options: :true/false :heur-switch
 		       (weight 1))
   "Parallels of given intervals are prohibited between all combinations of the given voices.

 Args:
   mode: Specifies whether only open or also hidden intervals should be avoided.
   intervals (list of ints): Specifies the intervals (as pitch classes) of of which parallels should be avoided. 

 Other arguments are inherited from r-pitch-pitch."
   (map-pairwise
    #'(lambda (voice1 voice2)
        (ce::r-pitch-pitch (ce::fix-ompatch-rule #'(lambda (pitches1 pitches2)
 			  (if (every #'(lambda (p) p) (append pitches1 pitches2))  ; no rests -- no NILs
 			      (let* ((pitch1a (first pitches1)) ; 1st and 2nd pitch of voice A and voice B
 				     (pitch1b (second pitches1))
 				     (pitch2a (first pitches2))
 				     (pitch2b (second pitches2))
 				     (harm-interval2 (mod (abs (- pitch2b pitch2a)) 12)) 
 				     (matchingInterval2? (member harm-interval2 intervals)))
 				(case mode
 				  (:open-and-hidden (if matchingInterval2? 
 							(let ((directionA (signum (- pitch1a pitch2a)))  
 							      (directionB (signum (- pitch1b pitch2b))))
 							  (/= directionA directionB))
 							T))
 				  (:open (if matchingInterval2? 
 					     (let ((harm-interval1 (mod (abs (- pitch1b pitch1a)) 12))) 
 					       (/= harm-interval1 harm-interval2))
 					     T))))
 			      T)))	     
 		      (list voice1 voice2)
 		      '(0)
 		      :all
 		      gracenotes?
 		      :pitch
 		      rule-type weight))
    voices))

;;;;;;;;;;;;;;;;;;
;;; PWGL-VERSION -> ORIGINAL CODE

;;; no-voice-crossing 

(PWGLDef no-voice-crossing 
	 ((voices 0)
	  (input-mode  () (ccl::mk-menu-subview :menu-list '(":all" ":beat" ":1st-beat" ":1st-voice")))
	  (gracenotes?  () :gracenotes?-include-mbox)
	  &optional
	  (rule-type  () :rule-type-mbox)
	  (weight 1))
	 "Voices should not cross, i.e., the pitch of simultaneous note pairs in voices are always sorted in decreasing order.

Arguments are inherited from r-pitch-pitch."
	 () 
	 (let ((sorted-voices (sort voices #'<)))
	   (mappend #'(lambda (voice1 voice2)
			(r-pitch-pitch #'(lambda (pitches)
					   ;; no rests -- no NILs
					   (apply #'>= (remove NIL pitches))) 
				       (list voice1 voice2)
				       '(0)
				       input-mode
				       gracenotes?
				       :pitch
				       rule-type weight))
		    (butlast sorted-voices)
		    (rest sorted-voices))))
			
;; no-parallels

(PWGLDef no-parallels ((mode () (ccl::mk-menu-subview :menu-list '(":open" ":open-and-hidden"))) <=== ORIGINAL CODE
		       (intervals '(0 7))
		       (voices '(0 1))
		       (gracenotes?  () :gracenotes?-include-mbox)
		       &optional
		       (rule-type  () :rule-type-mbox)
		       (weight 1))
	 "Parallels of given intervals are prohibited between all combinations of the given voices.

Args:
  mode: Specifies whether only open or also hidden intervals should be avoided.
  intervals (list of ints): Specifies the intervals (as pitch classes) of of which parallels should be avoided. 

Other arguments are inherited from r-pitch-pitch."
	 () 
	 (map-pairwise
	  #'(lambda (voice1 voice2)
	      (r-pitch-pitch #'(lambda (pitches1 pitches2)
				 (if (every #'(lambda (p) p) (append pitches1 pitches2))  ; no rests -- no NILs
				     (let* ((pitch1a (first pitches1)) ; 1st and 2nd pitch of voice A and voice B
					    (pitch1b (second pitches1))
					    (pitch2a (first pitches2))
					    (pitch2b (second pitches2))
					    (harm-interval2 (mod (abs (- pitch2b pitch2a)) 12)) 
					    (matchingInterval2? (member harm-interval2 intervals)))
				       (case mode
					 (:open-and-hidden (if matchingInterval2? 
							       (let ((directionA (signum (- pitch1a pitch2a)))  
								     (directionB (signum (- pitch1b pitch2b))))
								 (/= directionA directionB))
							     T))
					 (:open (if matchingInterval2? 
						    (let ((harm-interval1 (mod (abs (- pitch1b pitch1a)) 12))) 
						      (/= harm-interval1 harm-interval2))
						  T))))
				   T))	     
			     (list voice1 voice2)
			     '(0)
			     :all
			     gracenotes?
			     :pitch
			     rule-type weight))
	  voices))
	  
|#
